"""
The command line module provides the main function of the application.
"""
# from asyncio import subprocess
from re import sub
import subprocess
import sys
import json
import click
import re
from pathlib import Path
from os import path, getcwd

from sympy import capture
from smelly_python.code_smell import CodeSmell
from .generator.webpage_generator import generate_webpage


@click.command()
@click.option('--file', '-f', type=click.Path(exists=True),
              help='Specify the python main directory for pylint.')
def main(file):
    """
    Main command line interface.
    Takes the first command line argument to be the json generated by pylint. make this a very long line please
    """
    if not file:
        print("Please provide the --file parameter")
        sys.exit(1)
    _setup_dirs()
    content = ""
    grade = ""
    print('Running pylint...')
    print(['pylint', file, f'--output-format=json:{_get_reports("report.json")},text:{_get_reports("grade.txt")}', '--exit-zero'])
    try:
        result = subprocess.run(['pylint', file, f'--output-format=json:{_get_reports("report.json")},text:{_get_reports("grade.txt")}', '--exit-zero'],
                                capture_output=True, text=True, check=True)
    except subprocess.CalledProcessError:
        print(
            f'Whoops we could not run pylint for the following file: {file}')
        print(result.stderr)
        sys.exit(1)
    with open(_get_reports('report.json'), 'r', encoding='utf-8') as input_file:
        content = json.load(input_file)
    with open(_get_reports('grade.txt'), 'r', encoding='utf-8') as input_file:
        grade = re.search("Your code has been rated at (\d+\.?\d*)", input_file.read()).group(1)

    code_smells = CodeSmell.convert_dict(content)
    generate_webpage(code_smells, grade=grade)

def _setup_dirs():
    Path('report/smelly_python').mkdir(parents=True, exist_ok=True)

def _get_reports(file_name):
    return path.join(getcwd(), 'report/smelly_python', file_name)